local druid = require("druid.druid")

function init(self)
	self.druid = druid.new(self)
	
	self.button_dev = gui.get_node("DevelopButton")
	self.text_devButton = gui.get_node("DevelopButtonText")
	self.button_compare = gui.get_node("CompareButton")
	self.text_compareButton = gui.get_node("CompareButtonText")
	self.button_save = gui.get_node("SaveButton")
	self.text_saveButton = gui.get_node("SaveButtonText")
	self.button_load = gui.get_node("LoadButton")
	self.text_loadButton = gui.get_node("LoadButtonText")
	self.button_reset = gui.get_node("ResetButton")
	self.text_resetButton = gui.get_node("ResetButtonText")
	
	-- Create Druid buttons
	self.druid:new_button("DevelopButton", function()
		msg.post(".", "release_input_focus")
		msg.post("ProxyCollection:/ProxyCalls", "run_dev")
	end)
	
	self.druid:new_button("CompareButton", function()
		-- Handle compare button action
	end)
	
	self.druid:new_button("SaveButton", function()
		-- Handle save button action
	end)
	
	self.druid:new_button("LoadButton", function()
		-- Handle load button action
	end)
	
	self.druid:new_button("ResetButton", function()
		-- Handle reset button action
	end)
	
	msg.post(".","set_buttons_text", {value = true})
	msg.post(".", "acquire_input_focus")
	
	self.druid:final()
end

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_buttons_text") then
		gui.set_text(self.text_devButton,G_UI_text.flow_dev)
		gui.set_text(self.text_compareButton,G_UI_text.flow_compare)
		gui.set_text(self.text_saveButton,G_UI_text.flow_save)
		gui.set_text(self.text_loadButton,G_UI_text.flow_load)
		gui.set_text(self.text_resetButton,G_UI_text.flow_reset)
	end
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function on_reload(self)
	self.druid:on_input_interrupt()
end
