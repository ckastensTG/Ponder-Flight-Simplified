local druid = require("druid.druid")

local slider = require("druid.extended.slider")

-- All component callbacks pass "self" as first argument
-- This "self" is a context data passed in `druid.new(context)`

local function on_slider_change(self)
--	print(self.slider.value)
	msg.post("PlanePanelContainer1", "update_units", {units = 20*self.slider.value})
	msg.post("PlanePanelContainer2", "update_units", {units = 20*self.slider.value})
end

function init(self)
    self.druid = druid.new(self)
	druid.register("slider", slider)
	self.slider = self.druid:new_slider("slider_pin", vmath.vector3(118, 0, 0), on_slider_change)
	self.slider:set_steps({0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0})
	self.slider:set(0.05)
end

-- "final" is a required function for the correct Druid workflow
function final(self)
    self.druid:final()
end

-- "update" is used in progress bar, scroll, and timer basic components
function update(self, dt)
    self.druid:update(dt)
end

-- "on_message" is used for specific Druid events, like language change or layout change
function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

-- "on_input" is used in almost all Druid components
-- The return value from `druid:on_input` is required!
function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end